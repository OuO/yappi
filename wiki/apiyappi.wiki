#summary yappi User and Reference Manual

= Reference Manual =

{{{
yappi.*start*([profile_builtins=False])
}}}
    This function will start yappi and all threads in the current interpreter will be     profiled. This function can be called from any thread at any time in the application. If there is another instance of yappi running in the interpreter or an unexpected situation occurs while initializing the profiler data structures, a relevant exception will be raised. 

Function will take an optional parameter named _profile_builtins_. As the name suggests, this means we also want to profile builtin functions used by standart modules.
	
def stop():
	threading.setprofile(None)
	_yappi.stop()	

def enum_stats(fenum):
	_yappi.enum_stats(fenum)

def get_stats(sorttype=_yappi.SORTTYPE_NCALL, 
			  sortorder=_yappi.SORTORDER_DESCENDING,
			  limit=_yappi.SHOW_ALL):
	return _yappi.get_stats(sorttype, sortorder, limit)
	
def print_stats(sorttype=_yappi.SORTTYPE_NCALL, 
				sortorder=_yappi.SORTORDER_DESCENDING,
				limit=_yappi.SHOW_ALL):
	li = _yappi.get_stats(sorttype, sortorder, limit)
	for it in li:
		print it

def clear_stats():
	_yappi.clear_stats()

SORTTYPE_NAME = _yappi.SORTTYPE_NAME
SORTTYPE_NCALL = _yappi.SORTTYPE_NCALL
SORTTYPE_TTOTAL = _yappi.SORTTYPE_TTOTAL
SORTTYPE_TSUB = _yappi.SORTTYPE_TSUB
SORTTYPE_TAVG = _yappi.SORTTYPE_TAVG
SORTORDER_ASCENDING = _yappi.SORTORDER_ASCENDING
SORTORDER_DESCENDING = _yappi.SORTORDER_DESCENDING
SHOW_ALL = _yappi.SHOW_ALL

= Details =

Add your content here.  Format your content with:
  * Text in *bold* or _italic_
  * Headings, paragraphs, and lists
  * Automatic links to other wiki pages