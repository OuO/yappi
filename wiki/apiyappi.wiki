#summary yappi Usage Manual

= Reference Manual =

<font face='Courier New'>
yappi.<b>start</b>(builtins, timing_sample)
</font>

Remarks:

Starts profiling all threads in the current interpreter instance. This function can be called from any thread at any time in the client application.  Note that yappi is per-interpreter resource, you cannot run more than one instance per-interpreter. A relevant exception will be raised if you do so.
Resumes previous profiling data if stop() is called previously.(Note: you can clear the profiling stats via clear_stats() in a successfull start()/stop() sequence.)

Params:

Function will take an optional parameter named *builtins*. As the name suggests, this means we also want to profile builtin functions used by standart Python modules. It is _False_ by _default_.

The second param is *timing_sample*. This param can be used further to decrease profiler runtime by giving away timing accuracy. On every timing_sample value timing measurements will be done, other times yappi will use a previous timing sample of the same function. There is no universal value for this param, just profile your own application and select the best value that suits you as the tradeoff is very application dependant. It is _1_ by _default_ which means every function call annonated and time measurements are calculated.

Please do not mess with this value unless you have very specific reasons for faster profile runtime.	

----

<font face='Courier New'>
yappi.<b>stop</b>()
</font>

Remarks:

Stops the currently running yappi instance. Same profiling session might be resumed later by calling start().(unless clear_stats() is called in that period.)

----

<font face='Courier New'>
yappi.<b>enum_stats</b>(fenum)
</font>

Remarks:

Enumerates the profile stats one by one. The parameter _fenum_ should be a callable Python function with one parameter, say _stat_entry_ which will be invoked per yappi stat-item. Can only be called if there are any statistics available, meaning profiler had run at least one time and clear_stats() is not called. 

Example:

{{{
import yappi
def estat(stat_entry):
	print e
def foo():
	pass
yappi.start(True)
foo()
yappi.stop()
yappi.enum_stats(estat)
}}}

----

<font face='Courier New'>
yappi.<b>get_stats</b>(sorttype, sortorder, limit)
</font>

Remarks:

Returns the current statistic result in a list object formatted according to the given parameters.

Params:

  * <font face='Courier New'><b>sorttype</b></font>: There are several columns in the statistics results. This parameter controls on which column you want the sort to be based on. The valid values for this parameter are:
    * <font face='Courier New'>yappi.SORTTYPE_NAME</font>  : Sorts the results according to function name.
    * <font face='Courier New'>yappi.SORTTYPE_NCALL</font> : Sorts the results according to their call count._(default)_
    * <font face='Courier New'>yappi.SORTTYPE_TTOTAL</font>: Sorts the results according to their total time.
    * <font face='Courier New'>yappi.SORTTYPE_TSUB</font>  : Sorts the results according to their total subtime.      Subtime means the total spent time in the function minus the total time spent in the other functions called from this function.
    * <font face='Courier New'>yappi.SORTTYPE_TAVG</font>  : Sorts the results according to their total average time.
  * <font face='Courier New'><b>sortorder</b></font>: The order type of the column. Valid values for this parameter are:
    * <font face='Courier New'>yappi.SORTORDER_ASCENDING</font> : Sorts the values in ascending order.
    * <font face='Courier New'>yappi.SORTORDER_DESCENDING</font> : Sorts the values in descending order._(default)_
  * <font face='Courier New'><b>limit</b></font>: There may be too many functions profiled and user is not interested in many of them. So, limit gives the user the ability to limit the result set returned by the function. With this and above param, a user easily retrieves the top running functions that he/she is interested in.
    * <font face='Courier New'>yappi.SHOW_ALL</font> : Returns all of the statistic results._(default)_

Example:

{{{
import yappi
def foo(): pass
yappi.start()
foo()
stats = yappi.get_stats()
for stat in stats: print stat
yappi.stop()
'''
Output:
>python simple.py
name                                 ccnt     ttot       tsub       tavg
simple.py.foo:2                      1        0.000041   0.000041   0.000041   


tname          tid    fname                                schedc   ttot
_MainThread    2884   yappi.py.get_stats:44                1        0.000000   


status     tstart                    fcnt     tcnt     memusage(bytes)
running    Sun Nov 22 11:51:16 200.. 2        1        37932    

>
'''
}}}

----

<font face='Courier New'>
yappi.<b>print_stats</b>()
</font>

Remarks:

Prints the current statistic results to the stdout. The parameters are same as the get_stats() function.

----

<font face='Courier New'>
yappi.<b>clear_stats</b>(sorttype, sortorder, limit)
</font>

Remarks:

Clears the profiling statistic information. Note that the only way to really delete the statistics is this function. The results stays with the application unless application(all threads including the main thread) exists or clear_stats() is called. yappi does not mess with the result set upon stop() or start(). It is user's responsibility to clear the statistics whenever appropiate. This also means without calling clear_stats(), you can resume previously stopped profile informations via start().