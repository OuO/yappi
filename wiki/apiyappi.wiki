#summary yappi User and Reference Manual

= Reference Manual =

<font face='Courier New'>
yappi.<b>start</b>(builtins)
</font>

This function will start yappi and all threads in the current interpreter instance will be profiled. This function can be called from any thread at any time in the application. If there is another instance of yappi running in the interpreter or an unexpected situation occurs while initializing the profiler data structures, a relevant exception will be raised. Please note that yappi is per-application resource, you cannot run more than one instances per-application. Function will take an optional parameter named _builtins_. As the name suggests, this means we also want to profile builtin functions used by standart modules. It is *False* by *default*.
	

<font face='Courier New'>
yappi.<b>stop</b>()
</font>

Stops the currently running yappi instance. 


<font face='Courier New'>
yappi.<b>enum_stats</b>(fenum)
</font>

Enumerates the profile stats one by one. The parameter _fenum_ should be a callable Python function with one parameter, say _stat_entry_ which will be invoked per yappi stat-item. Can only be called if there are any statistics available, meaning profiler had run at least one time and clear_stats() is not called. See the example below:
{{{
import yappi
def enum_stats(stat_entry):
	print e
def foo():
	pass
yappi.start(True)
foo()
yappi.stop()
yappi.enum_stats(estat)
}}}


<font face='Courier New'>
yappi.<b>get_stats</b>(sorttype, sortorder, limit)
</font>

Returns the current statistic results in a predefined format according to the given parameters. get_stats() function accepts following parameters:

  * <font face='Courier New'><b>sorttype</b></font>: There are several columns in the statistics results. This parameter controls on which column you want the sort to be based on. The valid values for this parameter are:
    * <font face='Courier New'>yappi.SORTTYPE_NAME</font>  : Sorts the results according to function name.
    * <font face='Courier New'>yappi.SORTTYPE_NCALL</font> : Sorts the results according to their call count.*(default)*
    * <font face='Courier New'>yappi.SORTTYPE_TTOTAL</font>: Sorts the results according to their total time.
    * <font face='Courier New'>yappi.SORTTYPE_TSUB</font>  : Sorts the results according to their total subtime.      Subtime means the total spent time in the function minus the total time spent in the other functions called from this function.
    * <font face='Courier New'>yappi.SORTTYPE_TAVG</font>  : Sorts the results according to their total average time.
  * <font face='Courier New'><b>sortorder</b></font>: The order type of the column. Valid values for this parameter are:
    * <font face='Courier New'>yappi.SORTORDER_ASCENDING</font> : Sorts the values in ascending order.
    * <font face='Courier New'>yappi.SORTORDER_DESCENDING</font> : Sorts the values in descending order.*(default)*
  * <font face='Courier New'><b>limit</b></font>: There may be too many functions profiled and user is not interested in many of them. So, limit gives the user the ability to limit the result set returned by the function. With this and above param, a user easily retrieves the top running functions that he/she is interested in.
    * <font face='Courier New'>yappi.SHOW_ALL</font> : Returns all of the statistic results.*(default)*
    

<font face='Courier New'>
yappi.<b>print_stats</b>()
</font>

Prints the current statistic results to the stdout. The parameters are same get_stats() function.


<font face='Courier New'>
yappi.<b>clear_stats</b>(sorttype, sortorder, limit)
</font>

Clears the result statistics. Note that the only way to really delete the statistics is this function. The results stays with the application unless application(all threads including the main thread) exists or clear_stats() is called. yappi does not mess with the result set upon stop() or start(). It is user's responsibility to clear the statistics whenever appropiate.