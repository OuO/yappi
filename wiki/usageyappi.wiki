#summary Usage reference manual for yappi.
= Introduction =

*Simple Usage*
{{{
import yappi
def foo(): pass
yappi.start()
foo()
stats = yappi.get_stats()
for stat in stats: print stat
yappi.stop()
'''
Output:
>python test.py
name                              ccnt   ttot        tsub        tavg
testsimple.py.foo:2               1      0.000008    0.000008    0.000008

threads
Thread 828:<_yappi.get_stats>

profiler
3 functions profiled in 1 threads since Fri Nov 06 22:40:02 2009

        yappi overhead: 0.000036/0.000008(%464.285714)
>python
'''
}}}

*Interpreting the statistic results:*

*A More Complex Usage:*
{{{
'''
 start profiler with built-in profiling set to True. In this example,
 we try to demonstrate how yappi behaves when multiple threads will 
 call recursive functions which is one of the basic unit tests of the 
 profiler.
'''
import time
import yappi
from threading import Thread

NTHREAD = 5
MAXRDEPTH = 10

def foo2(): 
	time.sleep(0.1)

def foo(rdepth):
	if (rdepth == MAXRDEPTH): return
	foo2()
	foo(rdepth+1)	

if __name__ == "__main__":
	yappi.start(True)
	for i in range(NTHREAD):
		thr = Thread(foo(1))
	for it in yappi.get_stats(yappi.SORTTYPE_TTOTAL,
				  yappi.SORTORDER_ASCENDING,
				  yappi.SHOW_ALL):
		print it

"""
projects/yappi$ python usage.py

name                              ccnt   ttot        tsub        tavg
<time.sleep>                      50     4.523953    4.523953    0.090479
testusage2.py.foo:12              50     4.523881    0.001462    0.090478
testusage2.py.foo2:9              45     4.522419    0.001020    0.100498
threading.py._note:44             20     0.000137    0.000137    0.000007
<thread.get_ident>                15     0.000100    0.000100    0.000007
<built-in method acquire>         14     0.000108    0.000108    0.000008
<built-in method acquire>         11     0.000255    0.000255    0.000023
<built-in method release>         11     0.000078    0.000078    0.000007
threading.py.__init__:39          10     0.000096    0.000096    0.000010
threading.py.currentThread:733    10     0.000226    0.000158    0.000023
<built-in method release>         9      0.000064    0.000064    0.000007
threading.py.__stop:539           5      0.000838    0.000167    0.000168
threading.py.run:444              5      0.000055    0.000055    0.000011
threading.py.isDaemon:624         5      0.000038    0.000038    0.000008
threading.py.start:430            5      0.005066    0.000294    0.001013
threading.py._newname:374         5      0.000105    0.000105    0.000021
threading.py.notifyAll:267        5      0.000428    0.000114    0.000086
<thread.allocate_lock>            5      0.000081    0.000081    0.000016
threading.py.__init__:158         5      0.000262    0.000225    0.000052
threading.py.Condition:153        5      0.000375    0.000113    0.000075
threading.py._is_owned:198        5      0.000117    0.000070    0.000023
<thread.start_new_thread>         5      0.002105    0.002105    0.000421
threading.py.notify:249           5      0.000274    0.000124    0.000055
threading.py._set_daemon:415      5      0.000286    0.000124    0.000057
threading.py.__init__:396         5      0.001264    0.000357    0.000253
threading.py.join:579             5      0.000401    0.000194    0.000080
<len>                             5      0.000040    0.000040    0.000008
<range>                           1      0.000009    0.000009    0.000009

threads
Thread 12032:<_yappi.get_stats>
Thread 11456:<built-in method acquire>

profiler
30 functions profiled in 2 threads since Fri Oct 23 11:46:38 2009


        yappi overhead: 0.003215/4.531648(%0.070950)

projects/yappi$
"""
}}}